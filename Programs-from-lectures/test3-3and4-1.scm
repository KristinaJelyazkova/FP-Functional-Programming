(define (task1)
  (letrec ((loop (lambda (i)
                   (display i)
                   (display " ")
                   (if (and (> i 10)
                            (< i 25))
                       (loop (+ i 1))
                       12))))
    (loop 12)))

(define (func n)   ;(func 5) = ?
  (letrec ((f (lambda (n)
                (if (= n 0)
                    2
                    (- n (g (- n 1))))))
           (g (lambda (n)
                (if (= n 0)
                    2
                    (- n (f (- n 1)))))))
    (cons (f (+ n 1)) (g (- n 1)))))

(define L1 '(c (b a f d)))
(define L2 '(c (d e) (f d)))
(define L3 '(s (p (d f))))
(define L4 '(a (p q r ((f)))))

(define L '(a (b) (c d)))
(define L01 (list (car L)     ;L01 = (a b c (d))
                  (caadr L)
                  (caaddr L)
                  (cdaddr L)))
(define L02 (let ((c (caaddr L))     ;L02 = (d (c b) a)
                  (b (caadr L))
                  (d (car (cdaddr L)))
                  (a (car L)))
              (let ((cb (list c b)))
                (list d cb a))))
(define L03 (let ((b (caadr L))     ;L03 = ((b (c a)) d)
                  (c (caaddr L))
                  (a (car L))
                  (d (car (cdaddr L))))
              (let ((ca (list c a)))
                (let ((bca (list b ca)))
                  (list bca d)))))
(define L04 (let ((b (caadr L))     ;L04 = (b (d (c a)))
                  (c (caaddr L))
                  (a (car L))
                  (d (car (cdaddr L))))
              (let ((ca (list c a)))
                (let ((dca (list d ca)))
                  (list b dca)))))